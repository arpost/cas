<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  CAS Server
  %%
  Copyright (C) 2012 - 2016 Emory University
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->

<!--
	| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
	| all CAS deployers will need to modify.
	|
	| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.  
	| The beans declared in this file are instantiated at context initialization time by the Spring 
	| ContextLoaderListener declared in web.xml.  It finds this file because this
	| file is among those declared in the context parameter "contextConfigLocation".
	|
	| By far the most common change you will need to make in this file is to change the last bean
	| declaration to replace the default SimpleTestUsernamePasswordAuthenticationHandler with
	| one implementing your approach for authenticating usernames and passwords.
	+-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:sec="http://www.springframework.org/schema/security"
	   xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
       http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd" xmlns:cache="http://www.springframework.org/schema/cache">
	<bean id="authHandlerList" class="edu.emory.cci.aiw.cvrg.eureka.cas.AuthenticationHandlerListFactory">
		<constructor-arg>
			<list>
				<!--
					| This is the authentication handler that authenticates services by means of callback via SSL, thereby validating
					| a server side SSL certificate.
					+-->
				<bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
					p:httpClient-ref="httpClient" />
			</list>
		</constructor-arg>
		<constructor-arg>
			<value>#{authHandlerChooser.selectedAuthHandlers}</value>
		</constructor-arg>
		<constructor-arg>
			<list>
				<bean class="org.jasig.cas.support.oauth.authentication.handler.support.OAuthAuthenticationHandler">
                                        <property name="configuration" ref="oauthConfig" />
				</bean>
			</list>
		</constructor-arg>
	</bean>
	<!--
		| This bean declares our AuthenticationManager.  The CentralAuthenticationService service bean
		| declared in applicationContext.xml picks up this AuthenticationManager by reference to its id, 
		| "authenticationManager".  Most deployers will be able to use the default AuthenticationManager
		| implementation and so do not need to change the class of this bean.  We include the whole
		| AuthenticationManager here in the userConfigContext.xml so that you can see the things you will
		| need to change in context.
		+-->
	<bean id="authenticationManager"
		class="org.jasig.cas.authentication.AuthenticationManagerImpl">
		<!--
			| This is the List of CredentialToPrincipalResolvers that identify what Principal is trying to authenticate.
			| The AuthenticationManagerImpl considers them in order, finding a CredentialToPrincipalResolver which 
			| supports the presented credentials.
			|
			| AuthenticationManagerImpl uses these resolvers for two purposes.  First, it uses them to identify the Principal
			| attempting to authenticate to CAS /login .  In the default configuration, it is the DefaultCredentialsToPrincipalResolver
			| that fills this role.  If you are using some other kind of credentials than UsernamePasswordCredentials, you will need to replace
			| DefaultCredentialsToPrincipalResolver with a CredentialsToPrincipalResolver that supports the credentials you are
			| using.
			|
			| Second, AuthenticationManagerImpl uses these resolvers to identify a service requesting a proxy granting ticket. 
			| In the default configuration, it is the HttpBasedServiceCredentialsToPrincipalResolver that serves this purpose. 
			| You will need to change this list if you are identifying services by something more or other than their callback URL.
			+-->
		<property name="credentialsToPrincipalResolvers">
			<list>
				<!--
					| UsernamePasswordCredentialsToPrincipalResolver supports the UsernamePasswordCredentials that we use for /login 
					| by default and produces SimplePrincipal instances conveying the username from the credentials.
					| 
					| If you've changed your LoginFormAction to use credentials other than UsernamePasswordCredentials then you will also
					| need to change this bean declaration (or add additional declarations) to declare a CredentialsToPrincipalResolver that supports the
					| Credentials you are using.
					+-->
				<bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver">
					<property name="attributeRepository" ref="jdbcAttributeRepository" />
				</bean>
				<!--
					| HttpBasedServiceCredentialsToPrincipalResolver supports HttpBasedCredentials.  It supports the CAS 2.0 approach of
					| authenticating services by SSL callback, extracting the callback URL from the Credentials and representing it as a
					| SimpleService identified by that callback URL.
					|
					| If you are representing services by something more or other than an HTTPS URL whereat they are able to
					| receive a proxy callback, you will need to change this bean declaration (or add additional declarations).
					+-->
				<bean class="org.jasig.cas.authentication.principal.HttpBasedServiceCredentialsToPrincipalResolver" />

				<ref bean="ldapPrincipalResolver" />

				<bean class="edu.emory.cci.aiw.cvrg.eureka.cas.authentication.OAuthCredentialsToPrincipalResolver">
					<property name="jdbcTemplate">
						<value>#{jdbcTemplateGenerator.jdbcTemplateFromJndiName}</value>
					</property>  
				</bean>
			</list>
		</property>
		
		<!--
			| Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, 
			| AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
			| authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
			| until it finds one that both supports the Credentials presented and succeeds in authenticating.
			+-->
		<property name="authenticationHandlers" ref="authHandlerList"/>
		<property name="authenticationMetaDataPopulators">
			<list>
				<!--<bean class="org.jasig.cas.authentication.SamlAuthenticationMetaDataPopulator" />-->
				<bean class="org.jasig.cas.support.oauth.authentication.OAuthAuthenticationMetaDataPopulator" />
				<bean class="edu.emory.cci.aiw.cvrg.eureka.cas.authentication.AuthenticationMethodMetaDataPopulator" />
			</list>
		</property>
	</bean>
        
	<bean id="jndiDataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="java:comp/env/jdbc/UserService" />
	</bean>        
        
        <bean id="sqlStringGenerator" class="edu.emory.cci.aiw.cvrg.eureka.cas.SQLStringGenerator">
                <property name="jndiName" value="java:comp/env/jdbc/UserService"/>
        </bean>
	<bean id="jdbcAuthHandler" class="org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler">
                <property name="sql">
                    <value>#{sqlStringGenerator.userVerficationSQLString}</value>
                </property>
                <property name="dataSource" ref="jndiDataSource" />
		<property name="passwordEncoder">
			<bean class="edu.emory.cci.aiw.MD5PasswordEncoder" />
		</property>
	</bean>

	<bean id="authHandlerChooser"
		  class="edu.emory.cci.aiw.cvrg.eureka.cas.AuthenticationHandlerChooser">
		<property name="authHandlersString" value="${eureka.authHandlers}"/>
		<property name="authHandlers">
			<map>
				<entry key="jdbc" value-ref="jdbcAuthHandler"/>
				<entry key="fastLdap" value-ref="fastLdapAuthHandler"/>
				<entry key="ldap" value-ref="ldapAuthHandler"/>
			</map>
		</property>
	</bean>                
        
	<bean name="attributeRepository" class="org.jasig.services.persondir.support.MergingPersonAttributeDaoImpl">
		<property name="personAttributeDaos">
			<list>
				<ref bean="jdbcAttributeRepository" />
				<ref bean="ldapAttributeRepository" />
			</list>
		</property>
	</bean>

	<bean name="jdbcAttributeRepository"  class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
		<constructor-arg index="0" ref="jndiDataSource" />
		<constructor-arg index="1" value="select c.username as username, c.firstName as firstName, c.lastName as lastName, c.fullName as fullName, c.email as email, c.title as title, c.department as department, c.organization as organization from users c join local_users c1 on (c.id=c1.id) where c.username=?" />
		<property name="resultAttributeMapping">
			<map>
				<entry key="username" value="username"/>
				<entry key="firstName" value="firstName"/>
				<entry key="lastName" value="lastName"/>
				<entry key="fullName" value="fullName" />
				<!--<entry key="authorities" value="authorities" />-->
				<entry key="email" value="email"/>
				<entry key="title" value="title"/>
				<entry key="department" value="department"/>
				<entry key="organization" value="organization"/>
			</map>
		</property>
	</bean>

	<bean id="fastLdapAuthHandler"
		  class="org.jasig.cas.adaptors.ldap.FastBindLdapAuthenticationHandler" 
		  p:filter="${ldap.authentication.filter:cn=%u},${ldap.authentication.basedn:cn=users,dc=school,dc=edu}"
		  p:contextSource-ref="ldapCtxSource" />
	
	<bean id="ldapAuthHandler"
		  class="org.jasig.cas.adaptors.ldap.BindLdapAuthenticationHandler"
		  p:filter="${ldap.authentication.filter:cn=%u}"
		  p:searchBase="${ldap.authentication.basedn:cn=users,dc=school,dc=edu}"
		  p:contextSource-ref="ldapCtxSource"
		  p:searchContextSource-ref="pooledContextSource"
		  p:ignorePartialResultException="true" />
	

	<bean id="ldapCtxSource"
		  class="org.springframework.ldap.core.support.LdapContextSource">
		<property name="pooled" value="false" />
		<property name="urls" value="${ldap.authentication.server.urls:ldap://1.1.1.1}" />
		
		<!-- Only specify username and password for regular bind not fastbind -->
		<property name="userDn" value="${ldap.authentication.manager.userdn:cn=manager,cn=users,dc=school,dc=edu}"/>
		<property name="password" value="${ldap.authentication.manager.password:password}"/>
		<property name="baseEnvironmentProperties">
			<map>
				<entry key="com.sun.jndi.ldap.connect.timeout" value="${ldap.authentication.jndi.connect.timeout:3000}"/>
				<entry key="com.sun.jndi.ldap.read.timeout" value="${ldap.authentication.jndi.read.timeout:3000}"/>
				<entry key="javax.naming.security.authentication" value="${ldap.authentication.jndi.security.level:simple}"/>
			</map>
		</property>
		
	</bean>

	<bean id="ldapPrincipalResolver"
		  class="org.jasig.cas.authentication.principal.CredentialsToLDAPAttributePrincipalResolver">
		<property name="credentialsToPrincipalResolver">
			<bean class="org.jasig.cas.authentication.principal.UsernamePasswordCredentialsToPrincipalResolver"/>
		</property>
		<property name="filter" value="${ldap.authentication.filter:cn=%u}" />
		<property name="principalAttributeName" value="uid" />
		<property name="searchBase" value="${ldap.authentication.basedn:cn=users,dc=school,dc=edu}" />
		<property name="contextSource" ref="ldapCtxSource" />
		<property name="attributeRepository" ref="ldapAttributeRepository" />
	</bean>

	<bean id="ldapAttributeRepository"
		  class="org.jasig.services.persondir.support.ldap.LdapPersonAttributeDao">
		<property name="contextSource" ref="ldapCtxSource" />
		<!--<property name="ldapTemplate" ref="ldapTemplate" />-->
		<property name="baseDN" value="${ldap.authentication.basedn:cn=users,dc=school,dc=edu}" />
		<property name="requireAllQueryAttributes" value="true" />
		<property name="queryAttributeMapping">
			<map>
				<entry key="username" value="${eureka.ldap.uid.attribute:cn}" />
			</map>
		</property>
		<property name="resultAttributeMapping">
			<map>
				<entry key="${eureka.ldap.username.attribute:uid}" value="username" />
				<entry key="${eureka.ldap.firstName.attribute:givenName}" value="firstName" />
				<entry key="${eureka.ldap.lastName.attribute:sn}" value="lastName" />
				<entry key="${eureka.ldap.fullName.attribute:cn}" value="fullName" />
				<entry key="${eureka.ldap.email.attribute:mail}" value="email" />
				<entry key="${eureka.ldap.title.attribute:title}" value="title" />
				<entry key="${eureka.ldap.department.attribute:ou}" value="department" />
				<entry key="${eureka.ldap.company.attribute:o}" value="organization" />
			</map>
		</property>
		<!--<property name="ldapAuthoritiesPopulator" ref="ldapAuthoritiesPopulator" />-->
	</bean>
	
	<!--<bean id="ldapTemplate" class="org.springframework.ldap.core.LdapTemplate">
        <constructor-arg ref="ldapCtxSource" />
        <property name="ignorePartialResultException" value="true" />
        </bean> -->
	
	<!--<bean id="ldapAuthoritiesPopulator"
		class="org.springframework.security.ldap.userdetails.DefaultLdapAuthoritiesPopulator">
		<constructor-arg ref="ldapCtxSource" />
		<constructor-arg value="${ldap.authentication.basedn:cn=users,dc=school,dc=edu}" />
		<property name="groupRoleAttribute" value="cn" />
		<property name="groupSearchFilter" value="(memberUid={0})" />
	</bean>-->
	
	<bean id="pooledContextSource"
		  class="org.springframework.ldap.pool.factory.PoolingContextSource"
		  p:minIdle="${ldap.authentication.pool.minIdle:3}"
		  p:maxIdle="${ldap.authentication.pool.maxIdle:5}"
		  p:maxActive="${ldap.authentication.pool.maxSize:10}"
		  p:maxWait="${ldap.authentication.pool.maxWait:10000}"
		  p:timeBetweenEvictionRunsMillis="${ldap.authentication.pool.evictionPeriod:600000}"
		  p:minEvictableIdleTimeMillis="${ldap.authentication.pool.idleTime:1200000}"
		  p:testOnBorrow="${ldap.authentication.pool.testOnBorrow:false}"
		  p:testWhileIdle="${ldap.authentication.pool.testWhileIdle:true}"
		  p:dirContextValidator-ref="dirContextValidator"
		  p:contextSource-ref="ldapCtxSource" />
 
	<bean id="dirContextValidator"
	  class="org.springframework.ldap.pool.validation.DefaultDirContextValidator"
	  p:base=""
	  p:filter="objectclass=*">
		<property name="searchControls">
			<bean class="javax.naming.directory.SearchControls"
		  p:timeLimit="1000"
		  p:countLimit="1"
		  p:searchScope="0"
		  p:returningAttributes="" />
		</property>
	</bean>

	<!--
	This bean defines the security roles for the Services Management application.  Simple deployments can use the in-memory version.
	More robust deployments will want to use another option, such as the Jdbc version.
	
The name of this should remain "userDetailsService" in order for Spring Security to find it.
	-->
	<!-- <sec:user name="@@THIS SHOULD BE REPLACED@@" password="notused" authorities="ROLE_ADMIN" />-->

	<bean id="userDetailsService"
		  class="edu.emory.cci.aiw.cvrg.eureka.cas.authentication.EmptyUserDetailsManager" />

	<!--<sec:user-service id="userDetailsService">
		<sec:user name="super.user@emory.edu" password="notused" authorities="ROLE_ADMIN" />
	</sec:user-service>-->
	
	<!-- 
Bean that defines the attributes that a service may return.  This example uses the Stub/Mock version.  A real implementation
may go against a database or LDAP server.  The id should remain "attributeRepository" though.
	-->
	<!--
	<bean id="attributeRepository"
		class="org.jasig.services.persondir.support.StubPersonAttributeDao">
		<property name="backingMap">
			<map>
				<entry key="uid" value="uid" />
				<entry key="eduPersonAffiliation" value="eduPersonAffiliation" /> 
				<entry key="groupMembership" value="groupMembership" />
			</map>
		</property>
	</bean>
	-->	
	<!-- 
Sample, in-memory data store for the ServiceRegistry. A real implementation
would probably want to replace this with the JPA-backed ServiceRegistry DAO
The name of this bean should remain "serviceRegistryDao".
	-->
	<bean
		id="serviceRegistryDao"
		class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl">
		<property name="registeredServices">
			<list>
				<bean class="org.jasig.cas.services.RegexRegisteredService">
					<property name="id" value="0" />
					<property name="name" value="HTTPS" />
					<property name="description" value="Only Allows HTTPS Urls" />
					<property name="serviceId" value="${cas.services.filter}" />
					<property name="enabled" value="true"/>
					<property name="ssoEnabled" value="true"/>
					<property name="allowedToProxy" value="true"/>
					<property name="evaluationOrder" value="10000001" />
					<property name="allowedAttributes">
						<list>
							<value>authenticationMethod</value>
							<value>providerType</value>
							<value>username</value>
							<value>firstName</value>
							<value>lastName</value>
							<value>fullName</value>
							<value>email</value>
							<value>title</value>
							<value>department</value>
							<value>organization</value>
							<value>access_token</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>

	<bean id="auditTrailManager"
		  class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />

	<bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor">
		<property name="monitors">
			<list>
				<bean class="org.jasig.cas.monitor.MemoryMonitor"
					  p:freeMemoryWarnThreshold="10" />
       
				<bean class="org.jasig.cas.monitor.SessionMonitor"
					  p:ticketRegistry-ref="ticketRegistry"
					  p:serviceTicketCountWarnThreshold="5000"
					  p:sessionCountWarnThreshold="100000" />
			</list>
		</property>
	</bean>
        
	<!--
		|   Get jdbc template via jndiName bean   |   Check password expiration date bean   |   Update expirted password bean   |
		|   jdbcTemplateGenerator                 |   expirationCheckAction                 |   updateExpiredPasswordAction     |
		|                                         |                                                                             |
		|                                         |             inject jdbcTemplate into these two beans                        |
	--> 
	<bean id="jdbcTemplateGenerator" class="edu.emory.cci.aiw.cvrg.eureka.cas.JdbcTemplateGenerator">
		<property name="jndiName" value="java:comp/env/jdbc/UserService"/>                                                                  
	</bean>         
	<bean id="expirationCheckAction" class="edu.emory.cci.aiw.cvrg.eureka.cas.ExpirationCheckAction">
		<property name="jdbcTemplate">
			<value>#{jdbcTemplateGenerator.jdbcTemplateFromJndiName}</value>
		</property>
	</bean>    
	<bean id="updateExpiredPasswordAction" class="edu.emory.cci.aiw.cvrg.eureka.cas.UpdateExpiredPasswordAction">
		<property name="jdbcTemplate">
			<value>#{jdbcTemplateGenerator.jdbcTemplateFromJndiName}</value>
		</property>                                                                
	</bean>
                          
	<bean id="resetForgotPasswordAction" class="edu.emory.cci.aiw.cvrg.eureka.cas.ResetForgotPasswordAction">
		<property name="jdbcTemplate">
			<value>#{jdbcTemplateGenerator.jdbcTemplateFromJndiName}</value>
		</property>                                                                
	</bean>
		
</beans>
